#All boxes (categories) equally likely
sample(B,size=5,P,replace=FALSE)
sample(B,size=5,P,replace=TRUE)
#Task3
B=c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0)
B=c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0)
P=c(0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
0.0625, 0.0625, 0.0625, 0.0625, 0.03125, 0.03125, 0.03125,
0.03125, 0.03125, 0.03125, 0.03125, 0.03125)
#All boxes (categories) equally likely
sample(B,size=5,P,replace=FALSE)
sample(B,size=5,P,replace=TRUE)
sample(rep(c(1,0),c(8,12)),5,replace=FALSE)
myhyper=function(iter=100,N=20,r=12,n=5){
# make a matrix to hold the samples
#initially filled with NA's
sam.mat=matrix(NA,nr=n,nc=iter, byrow=TRUE)
#Make a vector to hold the number of successes over the trials
succ=c()
for( i in 1:iter){
#Fill each column with a new sample
sam.mat[,i]=sample(rep(c(1,0),c(r,N-r)),n,replace=FALSE)
#Calculate a statistic from the sample (this case it is the sum)
succ[i]=sum(sam.mat[,i])
}
#Make a table of successes
succ.tab=table(factor(succ,levels=0:n))
#Make a barplot of the proportions
barplot(succ.tab/(iter), col=rainbow(n+1), main="HYPERGEOMETRIC simulation", xlab="Number of successes")
succ.tab/iter
}
myhyper(iter=1000,n=19, N=20,r=12)
myhyper(iter=100,n=19, N=20,r=12)
myhyper(iter=100,n=5, N=20,r=12)
myhyper(iter=100,n=5, N=20,r=12)
myhyper(iter=200,n=5, N=20,r=12)
myhyper(iter=500,n=5, N=20,r=12)
myhyper(iter=1000,n=5, N=20,r=12)
myhyper(iter=10000,n=5, N=20,r=12)
mybin(iter = 100,   n = 10, p = 0.7)
#Hypergeometric function
myhyper=function(iter=100,N=20,r=12,n=5){
# make a matrix to hold the samples
#initially filled with NA's
sam.mat=matrix(NA,nr=n,nc=iter, byrow=TRUE)
#Make a vector to hold the number of successes over the trials
succ=c()
for( i in 1:iter){
#Fill each column with a new sample
sam.mat[,i]=sample(rep(c(1,0),c(r,N-r)),n,replace=FALSE)
#Calculate a statistic from the sample (this case it is the sum)
succ[i]=sum(sam.mat[,i])
}
#Make a table of successes
succ.tab=table(factor(succ,levels=0:n))
#Make a barplot of the proportions
barplot(succ.tab/(iter), col=rainbow(n+1),
main=sprintf("HYPERGEOMETRIC simulation of %d Iterations", iter),
xlab="Number of successes", ylab = "Probability of Success")
succ.tab/iter
}
myhyper(iter=100,n=5, N=20,r=12)
myhyper(iter=200,n=5, N=20,r=12)
myhyper(iter=500,n=5, N=20,r=12)
myhyper(iter=1000,n=5, N=20,r=12)
myhyper(iter=10000,n=5, N=20,r=12)
?dhyper
dbinom(x=5,m=12,n=8,k=20,p=1/2)
dbinom(m=12,n=8,k=20,p=1/2)
dhyper(x=5,m=12,n=8,k=20,p=1/2)
dhyper(x=5,m=12,n=8,k=20)
dhyper(x=0,m=12,n=8,k=20)
dhyper(x=0,m=12,n=8,k=20,p=c(1/2,1/2))
dhyper(x=0,m=12,n=8,k=20,p=1/2)
dhyper(x=0,m=12,n=8,k=20)
dhyper(x=1,m=12,n=8,k=20)
dhyper(x=2,m=12,n=8,k=20)
dhyper(x=3,m=12,n=8,k=20)
dhyper(x=4,m=12,n=8,k=20)
dhyper(x=5,m=12,n=8,k=20)
dhyper(q=0,m=12,n=8,k=20)
dhyper(x(1:5),m=12,n=8,k=20)
dhyper(x=c(1:5),m=12,n=8,k=20)
dhyper(x=0:20, m=12, n=8, k=20)
dhyper(x=0:20, m=12, n=8, k=20)
dhyper(x=0:5, m=12, n=8, k=20)
dhyper(x=0:20, m=12, n=8, k=5)
dhyper(x=0, m=12, n=8, k=5)
dhyper(x=0:5, m=12, n=8, k=5)
myhyper(iter=c(100,200),n=5, N=20,r=12)
dbinom(x = 7, size = 0:10,  prob = 0.7)
mysample=function(n, iter=10,time=0.5){
for( i in 1:iter){
#make a sample
s=sample(1:10,n,replace=TRUE)
# turn the sample into a factor
sf=factor(s,levels=1:10)
#make a barplot
barplot(table(sf)/n,beside=TRUE,col=rainbow(10),
main=paste("Example sample()", " iteration ", i, " n= ", n,sep="") ,
ylim=c(0,0.2)
)
#release the table
Sys.sleep(time)
}
}
mysample(n=1000, iter=30, time=1)
mysample(n=1000, iter=30, time=1)
#Task4
choose(8,4)
ppois(4, lambda=2)
dnbinom(10,3,0.4)
dbinom(8,5,0.4)
dbinom(0:8,5,0.4)
sum(dbinom(0:8,5,0.4))
sum(dbinom(0:8,15,0.4))
ppois(4, lambda=2)
for(i in 1:y-1){
tot = tot * i
}
mynbin=function(y,r,p){
tot=0
for(i in r:y){
tot = tot * i
}
for(i in 1:r){
tot = tot / i
}
tot = tot*p^r*(1-p)^(y-r)
tot
}
mynbin(10,3,0.4)
mynbin1=function(y,r,p){
choose(y-1,r-1)*p^r*(1-p)^(y-r)
}
mynbin1(10,3,0.4)
mynbin=function(y,r,p){
tot=0
for(i in r:y){
tot = tot * i
}
tot
for(i in 1:r){
tot = tot / i
}
tot
tot = tot*p^r*(1-p)^(y-r)
tot
}
mynbin(10,3,0.4)
mynbin=function(y,r,p){
tot=1
for(i in r:y){
tot = tot * i
}
tot
for(i in 1:r){
tot = tot / i
}
tot
tot = tot*p^r*(1-p)^(y-r)
tot
}
mynbin(10,3,0.4)
mynbin=function(y,r,p){
tot=1
for(i in r-1:y-1){
tot = tot * i
}
tot
for(i in 1:r-1){
tot = tot / i
}
tot
tot = tot*p^r*(1-p)^(y-r)
tot
}
mynbin(10,3,0.4)
mynbin=function(y,r,p){
tot=1
for(i in r-1:y-1){
tot = tot * i
}
for(i in 1:r-1){
tot = tot / i
}
tot = tot*p^r*(1-p)^(y-r)
}
mynbin(10,3,0.4)
show(tot)
mynbin=function(y,r,p){
tot=1
for(i in r-1:y-1){
tot = tot * i
}
for(i in 1:r-1){
tot = tot / i
}
tot = tot*p^r*(1-p)^(y-r)
}
tot = mynbin(10,3,0.4)
show(tot)
mynbin=function(y,r,p){
tot=1
#for(i in r-1:y-1){
# tot = tot * i
#}
#for(i in 1:r-1){
# tot = tot / i
#}
#tot = tot*p^r*(1-p)^(y-r)
}
tot = mynbin(10,3,0.4)
show(tot)
mynbin=function(y,r,p){
tot=1
for(i in r-1:y-1){
tot = tot * i
}
#for(i in 1:r-1){
# tot = tot / i
#}
#tot = tot*p^r*(1-p)^(y-r)
}
tot = mynbin(10,3,0.4)
show(tot)
mynbin=function(y,r,p){
tot=1
for(i in (r-1):(y-1)){
tot = tot * i
}
#for(i in 1:r-1){
# tot = tot / i
#}
#tot = tot*p^r*(1-p)^(y-r)
}
tot = mynbin(10,3,0.4)
show(tot)
mynbin=function(y,r,p){
tot=1
for(i in (r-1):(y-1)){
tot = tot * i
show(tot)
}
#for(i in 1:r-1){
# tot = tot / i
#}
#tot = tot*p^r*(1-p)^(y-r)
}
tot = mynbin(10,3,0.4)
show(tot)
mynbin=function(y,r,p){
tot=1
for(i in (r-1):(y-1)){
tot = tot * i
show(tot)
}
#for(i in 1:r-1){
# tot = tot / i
#}
#tot = tot*p^r*(1-p)^(y-r)
mynbin=tot
}
tot = mynbin(10,3,0.4)
show(tot)
mynbin=function(y,r,p){
tot=1
for(i in (r-1):(y-1)){
tot = tot * i
show(tot)
}
#for(i in 1:r-1){
# tot = tot / i
#}
#tot = tot*p^r*(1-p)^(y-r)
mynbin=tot
}
mynbin(10,3,0.4)
mynbin=function(y,r,p){
tot=1
for(i in (r-1):(y-1)){
tot = tot * i
show(tot)
}
#for(i in 1:r-1){
# tot = tot / i
#}
#tot = tot*p^r*(1-p)^(y-r)
mynbin=tot
}
show(mynbin(10,3,0.4))
mynbin=function(y,r,p){
tot=1
for(i in (r-1):(y-1)){
tot = tot * i
show(tot)
}
for(i in 1:(r-1)){
tot = tot / i
}
tot = tot*p^r*(1-p)^(y-r)
mynbin=tot
}
show(mynbin(10,3,0.4))
mynbin=function(y,r,p){
num=1
denum=1
for(i in (r-1):(y-1)){
num = num * i
show(tot)
}
for(i in 1:(r-1)){
denum = denum * i
}
tot = num/denum*p^r*(1-p)^(y-r)
mynbin=tot
}
show(mynbin(10,3,0.4))
mynbin1=function(y,r,p){
choose(y-1,r-1)*p^r*(1-p)^(y-r)
}
mynbin1(10,3,0.4)
show(mynbin(10,3,0.4))
choose(9,2)
show(mynbin(10,3,0.4))
choose(9,2)
show(mynbin(10,3,0.4))
mynbin=function(y,r,p){
num=1
denum=1
for(i in 1:(y-1)){
num = num * i
show(i)
}
for(i in 1:(r-1)){
denum = denum * i
}
tot = num/denum*p^r*(1-p)^(y-r)
mynbin=tot
}
show(mynbin(10,3,0.4))
choose(9,2)
mynbin=function(y,r,p){
num=1
denum=1
for(i in 1:(y-1)){
num = num * i
show(num)
}
for(i in 1:(r-1)){
denum = denum * i
}
tot = num/denum*p^r*(1-p)^(y-r)
mynbin=tot
}
show(mynbin(10,3,0.4))
choose(9,2)
#Task5
choose(8,4)
?factorial
factorial(3)
factorial(2,5)
factorial(5,2)
mynbin=function(y,r,p){
num=1
denum1=1
denum2=1
for(i in 1:(y-1)){
num = num * i
}
for(i in 1:(r-1)){
denum1 = denum1 * i
}
for(i in 1:((y-1)-(r-1))){
denum2 = denum2 * i
}
show(num/denum1/denum2)
tot = num/denum*p^r*(1-p)^(y-r)
mynbin=tot
}
show(mynbin(10,3,0.4))
choose(9,2)
mynbin=function(y,r,p){
num=1
denum1=1
denum2=1
for(i in 1:(y-1)){
num = num * i
}
for(i in 1:(r-1)){
denum1 = denum1 * i
}
for(i in 1:((y-1)-(r-1))){
denum2 = denum2 * i
}
tot = num/denum1/denum2*p^r*(1-p)^(y-r)
mynbin=tot
}
show(mynbin(10,3,0.4))
mynbin1=function(y,r,p){
choose(y-1,r-1)*p^r*(1-p)^(y-r)
}
mynbin1(10,3,0.4)
mynbin=function(y,r,p){
num=1
denum1=1
denum2=1
for(i in 1:(y-1)){
num = num * i
}
for(i in 1:(r-1)){
denum1 = denum1 * i
}
for(i in 1:((y-1)-(r-1))){
denum2 = denum2 * i
}
num/denum1/denum2*p^r*(1-p)^(y-r)
}
mynbin(10,3,0.4)
mynbin=function(y,r,p){
num=1
denum1=1
denum2=1
pr = 1
tail = 1
for(i in 1:(y-1)){
num = num * i
}
for(i in 1:(r-1)){
denum1 = denum1 * i
}
for(i in 1:((y-1)-(r-1))){
denum2 = denum2 * i
}
for(i in 1:r){
pr = pr * p
}
for(i in 1:(y-r)){
tail = tail * (1-p)
}
num/denum1/denum2*pr*tail
}
mynbin(10,3,0.4)
knitr::opts_chunk$set(echo = TRUE)
dbinom(x = 1:10, size = 0:10,  prob = 0.7)
dbinom(x = 7, size = 0:10,  prob = 0.7)
dbinom(x = 10, size = 0:10,  prob = 0.7)
dbinom(x = 7, size = 0:10,  prob = 0.7)
#Get working directory
getwd()
getwd()
mybin(iter = 10000, n = 10, p = 0.7)
sample(rep(c(1,0),c(8,12)),5,replace=FALSE)
sample(rep(c(1,0),c(8,12)),5,replace=TRUE)
myhyper(iter=10000,n=5, N=20,r=12)
mysample(n=1000, iter=30, time=1)
choose(8,4)
ppois(4, lambda=2)
dnbinom(10,3,0.4)
sum(dbinom(0:8,15,0.4))
dhyper(x=0:5, m=12, n=8, k=5)
dbinom(x = 7, size = 0:10,  prob = 0.7)
mybin(iter = 10000, n = 10, p = 0.7)
dbinom(size = 0:10,  prob = 0.7)
?dbinom
dbinom(x = 0:10,  prob = 0.7)
dbinom(x = 0:10, size = 10000, prob = 0.7)
dbinom(x = 0:10, size = 10, prob = 0.7)
dbinom(x = 0:10, size = 10, prob = 0.7)
library("Rcpp", lib.loc="~/R/win-library/3.4")
Rcpp::cppFunction('
double negbinfunc(int y,int r,double p){
int i;
double num = 1.0, denum1 = 1.0, denum2 = 1.0, pr = 1.0, tail = 1.0;
for(i = 1; i <= (y-1); ++i){
num *= i;
}
for(i = 1; i <= (r-1); ++i){
denum1 *= i;
}
for(i = 1; i <= ((y-1)-(r-1)); ++i){
denum2 *= i;
}
for(i = 1; i <= r; ++i){
pr *= p;
}
for(i = 1; i <= (y-r); ++i){
tail *= (1-p);
}
return num/denum1/denum2*pr*tail;
}')
Rcpp::cppFunction('
double negbinfunc(int y,int r,double p){
int i;
double num = 1.0, denum1 = 1.0, denum2 = 1.0, pr = 1.0, tail = 1.0;
for(i = 1; i <= (y-1); ++i){
num *= i;
}
for(i = 1; i <= (r-1); ++i){
denum1 *= i;
}
for(i = 1; i <= ((y-1)-(r-1)); ++i){
denum2 *= i;
}
for(i = 1; i <= r; ++i){
pr *= p;
}
for(i = 1; i <= (y-r); ++i){
tail *= (1-p);
}
return num/denum1/denum2*pr*tail;
}')
