text(pte,max(para$density)/2,round(pte,2),cex=2)
return(list(fun=fun,x=x,ci=ci))# Some output to use if necessary
}
################### END mybooot function #####################
set.seed(35); sam<-round(rnorm(30,mean=20,sd=3),3)
myboot(10000,x=sam,fun=function(x) mean(x),alpha=0.05,xlab="mean(x)",col=rainbow(length(x)))
#Lab 9
# Bootstrap
## sample function
set.seed(35) # This will give everyone the same sample
sam=round(rnorm(20,mean=10,sd=4),2)
unique(sample(sam,20,replace=TRUE) )
sample(sam,20,replace=FALSE)
########### bootstrap function ##################
myboot<-function(iter=10000,x,fun="mean",alpha=0.05,...){  #Notice where the ... is repeated in the code
n=length(x)   #sample size
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun) # xstat is a vector and will have iter values in it
ci=quantile(xstat,c(alpha/2,1-alpha/2))# Nice way to form a confidence interval
# A histogram follows
# The object para will contain the parameters used to make the histogram
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap sample statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
#mat will be a matrix that contains the data, this is done so that I can use apply()
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
#pte is the point estimate
#This uses whatever fun is
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")# Vertical line
segments(ci[1],0,ci[2],0,lwd=4)      #Make the segment for the ci
text(ci[1],0.05,paste("(",round(ci[1],2),sep=""),col="Red",cex=2)
text(ci[2],0.05,paste(round(ci[2],2),")",sep=""),col="Red",cex=2)
t=abs(qt(alpha/2,df=2*n-2))
cit = c()
cit[1]=mean(x)-t*sd(x)/sqrt(n)
cit[2]=mean(x)+t*sd(x)/sqrt(n)
text(cit[1],.15,paste("(",round(cit[1],2),sep=""),col="Blue",cex=2)
text(cit[2],.15,paste(round(cit[2],2),")",sep=""),col="Blue",cex=2)
# plot the point estimate 1/2 way up the density
text(pte,max(para$density)/2,round(pte,2),cex=2)
return(list(fun=fun,x=x,ci=ci))# Some output to use if necessary
}
################### END mybooot function #####################
set.seed(35); sam<-round(rnorm(30,mean=20,sd=3),3)
myboot(10000,x=sam,fun=function(x) mean(x),alpha=0.05,xlab="mean(x)",col=rainbow(length(x)))
#Lab 9
# Bootstrap
## sample function
set.seed(35) # This will give everyone the same sample
sam=round(rnorm(20,mean=10,sd=4),2)
unique(sample(sam,20,replace=TRUE) )
sample(sam,20,replace=FALSE)
########### bootstrap function ##################
myboot<-function(iter=10000,x,fun="mean",alpha=0.05,...){  #Notice where the ... is repeated in the code
n=length(x)   #sample size
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun) # xstat is a vector and will have iter values in it
ci=quantile(xstat,c(alpha/2,1-alpha/2))# Nice way to form a confidence interval
# A histogram follows
# The object para will contain the parameters used to make the histogram
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap sample statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
#mat will be a matrix that contains the data, this is done so that I can use apply()
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
#pte is the point estimate
#This uses whatever fun is
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")# Vertical line
segments(ci[1],0,ci[2],0,lwd=4)      #Make the segment for the ci
text(ci[1],0.05,paste("(",round(ci[1],2),sep=""),col="Red",cex=2)
text(ci[2],0.05,paste(round(ci[2],2),")",sep=""),col="Red",cex=2)
t=abs(qt(alpha/2,df=2*n-2))
cit = c()
cit[1]=mean(x)-t*sd(x)/sqrt(n)
cit[2]=mean(x)+t*sd(x)/sqrt(n)
text(cit[1],.15,paste("(",round(cit[1],2),sep=""),col="Blue",cex=2)
text(cit[2],.15,paste(round(cit[2],2),")",sep=""),col="Blue",cex=2)
# plot the point estimate 1/2 way up the density
text(pte,max(para$density)/2,round(pte,2),cex=2)
return(list(fun=fun,x=x,t=t,ci=ci,cit=cit))# Some output to use if necessary
}
################### END mybooot function #####################
set.seed(35); sam<-round(rnorm(30,mean=20,sd=3),3)
myboot(10000,x=sam,fun=function(x) mean(x),alpha=0.05,xlab="mean",col=rainbow(length(x)))
#Lab 9
# Bootstrap
## sample function
set.seed(35) # This will give everyone the same sample
sam=round(rnorm(20,mean=10,sd=4),2)
unique(sample(sam,20,replace=TRUE) )
sample(sam,20,replace=FALSE)
########### bootstrap function ##################
myboot<-function(iter=10000,x,fun="mean",alpha=0.05,...){  #Notice where the ... is repeated in the code
n=length(x)   #sample size
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun) # xstat is a vector and will have iter values in it
ci=quantile(xstat,c(alpha/2,1-alpha/2))# Nice way to form a confidence interval
# A histogram follows
# The object para will contain the parameters used to make the histogram
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap sample statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
#mat will be a matrix that contains the data, this is done so that I can use apply()
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
#pte is the point estimate
#This uses whatever fun is
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")# Vertical line
segments(ci[1],0,ci[2],0,lwd=4)      #Make the segment for the ci
text(ci[1],0.05,paste("(",round(ci[1],2),sep=""),col="Red",cex=2)
text(ci[2],0.05,paste(round(ci[2],2),")",sep=""),col="Red",cex=2)
t=abs(qt(alpha/2,df=n-1))
cit = c()
cit[1]=mean(x)-t*sd(x)/sqrt(n)
cit[2]=mean(x)+t*sd(x)/sqrt(n)
text(cit[1],.15,paste("(",round(cit[1],2),sep=""),col="Blue",cex=2)
text(cit[2],.15,paste(round(cit[2],2),")",sep=""),col="Blue",cex=2)
# plot the point estimate 1/2 way up the density
text(pte,max(para$density)/2,round(pte,2),cex=2)
return(list(fun=fun,x=x,t=t,ci=ci,cit=cit))# Some output to use if necessary
}
################### END mybooot function #####################
set.seed(35); sam<-round(rnorm(30,mean=20,sd=3),3)
myboot(10000,x=sam,fun=function(x) mean(x),alpha=0.05,xlab="mean",col=rainbow(length(x)))
#Lab 9
# Bootstrap
## sample function
set.seed(35) # This will give everyone the same sample
sam=round(rnorm(20,mean=10,sd=4),2)
unique(sample(sam,20,replace=TRUE) )
sample(sam,20,replace=FALSE)
########### bootstrap function ##################
myboot<-function(iter=10000,x,fun="mean",alpha=0.05,...){  #Notice where the ... is repeated in the code
n=length(x)   #sample size
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun) # xstat is a vector and will have iter values in it
ci=quantile(xstat,c(alpha/2,1-alpha/2))# Nice way to form a confidence interval
# A histogram follows
# The object para will contain the parameters used to make the histogram
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap sample statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
#mat will be a matrix that contains the data, this is done so that I can use apply()
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
#pte is the point estimate
#This uses whatever fun is
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")# Vertical line
segments(ci[1],0,ci[2],0,lwd=4)      #Make the segment for the ci
text(ci[1],0.05,paste("(",round(ci[1],2),sep=""),col="Red",cex=2)
text(ci[2],0.05,paste(round(ci[2],2),")",sep=""),col="Red",cex=2)
t=abs(qt(alpha/2,df=n-1))
cit = c()
cit[1]=mean(x)-t*sd(x)/sqrt(n)
cit[2]=mean(x)+t*sd(x)/sqrt(n)
text(cit[1],.15,paste("(",round(cit[1],2),sep=""),col="Blue",cex=2)
text(cit[2],.15,paste(round(cit[2],2),")",sep=""),col="Blue",cex=2)
# plot the point estimate 1/2 way up the density
text(pte,max(para$density)/2,round(pte,2),cex=2)
return(list(fun=fun,x=x,t=t,ci=ci,cit=cit))# Some output to use if necessary
}
################### END mybooot function #####################
set.seed(35); sam<-round(rnorm(30,mean=20,sd=3),3)
myboot(10000,x=sam,fun=mean(x),alpha=0.05,xlab="mean",col=rainbow(length(x)))
#Lab 9
# Bootstrap
## sample function
set.seed(35) # This will give everyone the same sample
sam=round(rnorm(20,mean=10,sd=4),2)
unique(sample(sam,20,replace=TRUE) )
sample(sam,20,replace=FALSE)
########### bootstrap function ##################
myboot<-function(iter=10000,x,fun="mean",alpha=0.05,...){  #Notice where the ... is repeated in the code
n=length(x)   #sample size
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun) # xstat is a vector and will have iter values in it
ci=quantile(xstat,c(alpha/2,1-alpha/2))# Nice way to form a confidence interval
# A histogram follows
# The object para will contain the parameters used to make the histogram
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap sample statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
#mat will be a matrix that contains the data, this is done so that I can use apply()
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
#pte is the point estimate
#This uses whatever fun is
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")# Vertical line
segments(ci[1],0,ci[2],0,lwd=4)      #Make the segment for the ci
text(ci[1],0.05,paste("(",round(ci[1],2),sep=""),col="Red",cex=2)
text(ci[2],0.05,paste(round(ci[2],2),")",sep=""),col="Red",cex=2)
t=abs(qt(alpha/2,df=n-1))
cit = c()
cit[1]=mean(x)-t*sd(x)/sqrt(n)
cit[2]=mean(x)+t*sd(x)/sqrt(n)
text(cit[1],.15,paste("(",round(cit[1],2),sep=""),col="Blue",cex=2)
text(cit[2],.15,paste(round(cit[2],2),")",sep=""),col="Blue",cex=2)
# plot the point estimate 1/2 way up the density
text(pte,max(para$density)/2,round(pte,2),cex=2)
return(list(fun=fun,x=x,t=t,ci=ci,cit=cit))# Some output to use if necessary
}
################### END mybooot function #####################
set.seed(35); sam<-round(rnorm(30,mean=20,sd=3),3)
myboot(10000,x=sam,fun=function(x)mean(x),alpha=0.05,xlab="mean",col=rainbow(length(x)))
#Lab 9
# Bootstrap
## sample function
set.seed(35) # This will give everyone the same sample
sam=round(rnorm(20,mean=10,sd=4),2)
unique(sample(sam,20,replace=TRUE) )
sample(sam,20,replace=FALSE)
########### bootstrap function ##################
myboot<-function(iter=10000,x,fun="mean",alpha=0.05,...){  #Notice where the ... is repeated in the code
n=length(x)   #sample size
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun) # xstat is a vector and will have iter values in it
ci=quantile(xstat,c(alpha/2,1-alpha/2))# Nice way to form a confidence interval
# A histogram follows
# The object para will contain the parameters used to make the histogram
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap sample statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
#mat will be a matrix that contains the data, this is done so that I can use apply()
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
#pte is the point estimate
#This uses whatever fun is
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")# Vertical line
segments(ci[1],0,ci[2],0,lwd=4)      #Make the segment for the ci
text(ci[1],0.05,paste("(",round(ci[1],2),sep=""),col="Red",cex=2)
text(ci[2],0.05,paste(round(ci[2],2),")",sep=""),col="Red",cex=2)
t=abs(qt(alpha/2,df=n-1))
cit = c()
cit[1]=mean(x)-t*sd(x)/sqrt(n)
cit[2]=mean(x)+t*sd(x)/sqrt(n)
text(cit[1],.15,paste("(",round(cit[1],2),sep=""),col="Blue",cex=2)
text(cit[2],.15,paste(round(cit[2],2),")",sep=""),col="Blue",cex=2)
# plot the point estimate 1/2 way up the density
text(pte,max(para$density)/2,round(pte,2),cex=2)
return(list(fun=xlab,x=x,t=t,ci=ci,cit=cit))# Some output to use if necessary
}
################### END mybooot function #####################
set.seed(35); sam<-round(rnorm(30,mean=20,sd=3),3)
myboot(10000,x=sam,fun=function(x)mean(x),alpha=0.05,xlab="mean",col=rainbow(length(x)))
#Lab 9
# Bootstrap
## sample function
set.seed(35) # This will give everyone the same sample
sam=round(rnorm(20,mean=10,sd=4),2)
unique(sample(sam,20,replace=TRUE) )
sample(sam,20,replace=FALSE)
########### bootstrap function ##################
myboot<-function(iter=10000,x,fun="mean",alpha=0.05,...){  #Notice where the ... is repeated in the code
n=length(x)   #sample size
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun) # xstat is a vector and will have iter values in it
ci=quantile(xstat,c(alpha/2,1-alpha/2))# Nice way to form a confidence interval
# A histogram follows
# The object para will contain the parameters used to make the histogram
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap sample statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
#mat will be a matrix that contains the data, this is done so that I can use apply()
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
#pte is the point estimate
#This uses whatever fun is
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")# Vertical line
segments(ci[1],0,ci[2],0,lwd=4)      #Make the segment for the ci
text(ci[1],0.05,paste("(",round(ci[1],2),sep=""),col="Red",cex=2)
text(ci[2],0.05,paste(round(ci[2],2),")",sep=""),col="Red",cex=2)
t=abs(qt(alpha/2,df=n-1))
cit = c()
cit[1]=mean(x)-t*sd(x)/sqrt(n)
cit[2]=mean(x)+t*sd(x)/sqrt(n)
text(cit[1],.15,paste("(",round(cit[1],2),sep=""),col="Blue",cex=2)
text(cit[2],.15,paste(round(cit[2],2),")",sep=""),col="Blue",cex=2)
# plot the point estimate 1/2 way up the density
text(pte,max(para$density)/2,round(pte,2),cex=2)
return(list(fun=xlab,x=x,t=t,ci=ci,cit=cit))# Some output to use if necessary
}
################### END mybooot function #####################
set.seed(35); sam<-round(rnorm(30,mean=20,sd=3),3)
myboot(10000,x=sam,alpha=0.05,xlab="mean",col=rainbow(length(x)))
#Lab 9
# Bootstrap
## sample function
set.seed(35) # This will give everyone the same sample
sam=round(rnorm(20,mean=10,sd=4),2)
unique(sample(sam,20,replace=TRUE) )
sample(sam,20,replace=FALSE)
########### bootstrap function ##################
myboot<-function(iter=10000,x,fun="mean",alpha=0.05,...){  #Notice where the ... is repeated in the code
n=length(x)   #sample size
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun) # xstat is a vector and will have iter values in it
ci=quantile(xstat,c(alpha/2,1-alpha/2))# Nice way to form a confidence interval
# A histogram follows
# The object para will contain the parameters used to make the histogram
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap sample statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
#mat will be a matrix that contains the data, this is done so that I can use apply()
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
#pte is the point estimate
#This uses whatever fun is
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")# Vertical line
segments(ci[1],0,ci[2],0,lwd=4)      #Make the segment for the ci
text(ci[1],0.05,paste("(",round(ci[1],2),sep=""),col="Red",cex=2)
text(ci[2],0.05,paste(round(ci[2],2),")",sep=""),col="Red",cex=2)
t=abs(qt(alpha/2,df=n-1))
cit = c()
cit[1]=mean(x)-t*sd(x)/sqrt(n)
cit[2]=mean(x)+t*sd(x)/sqrt(n)
text(cit[1],.15,paste("(",round(cit[1],2),sep=""),col="Blue",cex=2)
text(cit[2],.15,paste(round(cit[2],2),")",sep=""),col="Blue",cex=2)
# plot the point estimate 1/2 way up the density
text(pte,max(para$density)/2,round(pte,2),cex=2)
return(list(fun=fun,x=x,t=t,ci=ci,cit=cit))# Some output to use if necessary
}
################### END mybooot function #####################
set.seed(35); sam<-round(rnorm(30,mean=20,sd=3),3)
myboot(10000,x=sam,alpha=0.05,xlab="mean",col=rainbow(length(x)))
#Lab 9
# Bootstrap
## sample function
set.seed(35) # This will give everyone the same sample
sam=round(rnorm(20,mean=10,sd=4),2)
unique(sample(sam,20,replace=TRUE) )
sample(sam,20,replace=FALSE)
########### bootstrap function ##################
myboot<-function(iter=10000,x,fun="mean",alpha=0.05,...){  #Notice where the ... is repeated in the code
n=length(x)   #sample size
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun) # xstat is a vector and will have iter values in it
ci=quantile(xstat,c(alpha/2,1-alpha/2))# Nice way to form a confidence interval
# A histogram follows
# The object para will contain the parameters used to make the histogram
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap sample statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
#mat will be a matrix that contains the data, this is done so that I can use apply()
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
#pte is the point estimate
#This uses whatever fun is
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")# Vertical line
segments(ci[1],0,ci[2],0,lwd=4)      #Make the segment for the ci
text(ci[1],0.05,paste("(",round(ci[1],2),sep=""),col="Red",cex=2)
text(ci[2],0.05,paste(round(ci[2],2),")",sep=""),col="Red",cex=2)
t=abs(qt(alpha/2,df=n-1))
cit = c()
cit[1]=mean(x)-t*sd(x)/sqrt(n)
cit[2]=mean(x)+t*sd(x)/sqrt(n)
text(cit[1],.15,paste("(",round(cit[1],2),sep=""),col="Blue",cex=2)
text(cit[2],.15,paste(round(cit[2],2),")",sep=""),col="Blue",cex=2)
# plot the point estimate 1/2 way up the density
text(pte,max(para$density)/2,round(pte,2),cex=2)
return(list(fun=fun,x=x,t=t,ci=ci,cit=cit))# Some output to use if necessary
}
################### END mybooot function #####################
set.seed(35); sam<-round(rnorm(30,mean=20,sd=3),3)
myboot(10000,x=sam,alpha=0.05,xlab="mean",col=rainbow(length(x)))
myboot<-function(iter=10000,x,fun="mean",alpha=0.05,...){
n=length(x)
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun)
ci=quantile(xstat,c(alpha/2,1-alpha/2))
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap sample statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")
segments(ci[1],0,ci[2],0,lwd=4)
text(ci[1],0.05,paste("(",round(ci[1],2),sep=""),col="Red",cex=2)
text(ci[2],0.05,paste(round(ci[2],2),")",sep=""),col="Red",cex=2)
t=abs(qt(alpha/2,df=n-1))
cit = c()
cit[1]=mean(x)-t*sd(x)/sqrt(n)
cit[2]=mean(x)+t*sd(x)/sqrt(n)
text(cit[1],.15,paste("(",round(cit[1],2),sep=""),col="Blue",cex=2)
text(cit[2],.15,paste(round(cit[2],2),")",sep=""),col="Blue",cex=2)
text(pte,max(para$density)/2,round(pte,2),cex=2)
return(list(fun=fun,x=x,t=t,ci=ci,cit=cit))
}
set.seed(35); sam<-round(rnorm(30,mean=20,sd=3),3)
myboot(10000,x=sam,alpha=0.05,xlab="mean",col=rainbow(length(x)))
myboot<-function(iter=10000,x,fun="mean",alpha=0.05,...){
n=length(x)
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun)
ci=quantile(xstat,c(alpha/2,1-alpha/2))
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap sample statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")
segments(ci[1],0,ci[2],0,lwd=4)
text(ci[1],0.05,paste("(",round(ci[1],2),sep=""),col="Red",cex=2)
text(ci[2],0.05,paste(round(ci[2],2),")",sep=""),col="Red",cex=2)
t=abs(qt(alpha/2,df=n-1))
cit = c()
cit[1]=mean(x)-t*sd(x)/sqrt(n)
cit[2]=mean(x)+t*sd(x)/sqrt(n)
text(cit[1],.15,paste("(",round(cit[1],2),sep=""),col="Blue",cex=2)
text(cit[2],.15,paste(round(cit[2],2),")",sep=""),col="Blue",cex=2)
text(pte,max(para$density)/2,round(pte,2),cex=2)
return(list(fun=fun,x=x,t=t,ci=ci,cit=cit))
}
set.seed(35); sam<-round(rnorm(30,mean=20,sd=3),3)
myboot(10000,x=sam,alpha=0.05,xlab="mean",col=rainbow(length(x)))
gobi.df<-read.csv("GOBIANTS.csv",header=TRUE,sep = ",")
dry <- gobi.df[gobi.df$Region = "Dry Steppe"]
gobi.df<-read.csv("GOBIANTS.csv",header=TRUE,sep = ",")
dry.df = within(gobi.df, {
reg <- ifelse(Region == "Gobi Desert", "GS","DS")
reg<-factor(reg)
})
des.df = subset(gobi.df,subset=Region=="Gobi Desert")
View(dry.df)
gobi.df<-read.csv("GOBIANTS.csv",header=TRUE,sep = ",")
dry.df = within(gobi.df, {
reg <- ifelse(Region == "Gobi Desert", "GS","DS")
reg<-factor(reg)
})
des.df = subset(gobi.df,subset=Region=="Gobi Desert")
var.test(dry.df[dry.df$reg == "DS",]$AntSpecies,des.df$AntSpecies,5,10,var=1)
gobi.df<-read.csv("GOBIANTS.csv",header=TRUE,sep = ",")
dry.df = within(gobi.df, {
reg <- ifelse(Region == "Gobi Desert", "GS","DS")
reg<-factor(reg)
})
des.df = subset(gobi.df,subset=Region=="Gobi Desert")
var.test(dry.df[dry.df$reg == "DS",]$AntSpecies,des.df$AntSpecies,5,10)
gobi.df<-read.csv("GOBIANTS.csv",header=TRUE,sep = ",")
dry.df = within(gobi.df, {
reg <- ifelse(Region == "Gobi Desert", "GS","DS")
reg<-factor(reg)
})
des.df = subset(gobi.df,subset=Region=="Gobi Desert")
var.test(x=dry.df[dry.df$reg == "DS",]$AntSpecies,y=des.df$AntSpecies)
gobi.df<-read.csv("GOBIANTS.csv",header=TRUE,sep = ",")
dry.df = within(gobi.df, {
reg <- ifelse(Region == "Gobi Desert", "GS","DS")
reg<-factor(reg)
})
des.df = subset(gobi.df,subset=Region=="Gobi Desert")
var.test(x=dry.df[dry.df$reg == "DS",]$AntSpecies,y=des.df$AntSpecies,ratio=1)
gobi.df<-read.csv("GOBIANTS.csv",header=TRUE,sep = ",")
dry.df = within(gobi.df, {
reg <- ifelse(Region == "Gobi Desert", "GS","DS")
reg<-factor(reg)
})
des.df = subset(gobi.df,subset=Region=="Gobi Desert")
t.test(x=dry.df[dry.df$reg == "DS",]$AntSpecies,y=des.df$AntSpecies,10,5,var.equal = TRUE)
gobi.df<-read.csv("GOBIANTS.csv",header=TRUE,sep = ",")
dry.df = within(gobi.df, {
reg <- ifelse(Region == "Gobi Desert", "GS","DS")
reg<-factor(reg)
})
des.df = subset(gobi.df,subset=Region=="Gobi Desert")
t.test(x=dry.df[dry.df$reg == "DS",]$AntSpecies,y=des.df$AntSpecies,10,5)
gobi.df<-read.csv("GOBIANTS.csv",header=TRUE,sep = ",")
dry.df = within(gobi.df, {
reg <- ifelse(Region == "Gobi Desert", "GS","DS")
reg<-factor(reg)
})
des.df = subset(gobi.df,subset=Region=="Gobi Desert")
t.test(x=dry.df[dry.df$reg == "DS",]$AntSpecies,y=des.df$AntSpecies,conf.level = 0.95,var.equal = TRUE)
gobi.df<-read.csv("GOBIANTS.csv",header=TRUE,sep = ",")
dry.df = within(gobi.df, {
reg <- ifelse(Region == "Gobi Desert", "GS","DS")
reg<-factor(reg)
})
des.df = subset(gobi.df,subset=Region=="Gobi Desert")
var.test(x=dry.df[dry.df$reg == "DS",]$AntSpecies,y=des.df$AntSpecies,conf.level = 0.95)
View(dry.df)
set.seed(24); y1 = rnorm(30, 10, 5)
set.seed(34); y2 = rnorm(25, 11, 5)
t.test(y1,y2, var.equal = TRUE, mu =0, conf.level = 0.90)
myboot(10000,x=sam,fun=function(x) mean(x),alpha=0.05,xlab="mean(x)/median(x)",col="Blue")
gobi.df<-read.csv("GOBIANTS.csv",header=TRUE,sep = ",")
dry.df = within(gobi.df, {
reg <- ifelse(Region == "Gobi Desert", "GS","DS")
reg<-factor(reg)
})
des.df = subset(gobi.df,subset=Region=="Gobi Desert")
var.test(x=dry.df[dry.df$reg == "DS",]$AntSpecies,y=des.df$AntSpecies,conf.level = 0.95)
gobi.df<-read.csv("GOBIANTS.csv",header=TRUE,sep = ",")
dry.df = within(gobi.df, {
reg <- ifelse(Region == "Gobi Desert", "GS","DS")
reg<-factor(reg)
})
des.df = subset(gobi.df,subset=Region=="Gobi Desert")
var.test(x=dry.df[dry.df$reg == "DS",]$AntSpecies,y=des.df$AntSpecies,conf.level = 0.95)
var(dry.df[dry.df$reg == "DS",]$AntSpecies)/var(des.df$AntSpecies)
