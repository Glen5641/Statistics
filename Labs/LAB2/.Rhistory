setwd("~/Stat Methods/Labs/LAB2")
knitr::opts_chunk$set(echo = TRUE)
getwd()
read.csv(EPAGAS.csv)
read.csv(EPAGAS.csv, header = TRUE)
myread=function(csv){
fl=paste(dird,csv,sep="")
read.table(fl,header=TRUE,sep=",")
}
mpg.df=myread("EPAGAS.csv")
myread=function(csv){
fl=paste(dird,csv,sep="")
read.table(fl,header=TRUE,sep=",")
}
mpg.df=myread("EPAGAS.csv")
I.df=read.table(file.choose(),header=TRUE,sep=",")
I.df=read.table(file.choose(),header=TRUE,sep=",")
head()
I.df=read.table(file.choose(),header=TRUE,sep=",")
head(I.df)
mpg.df=read.table(file.choose(),header=TRUE,sep=",")
head(mpg.df)
mpg=mpg.df$MPG
mpg=mpg.df$MPG
show(mpg)
mpg=mpg.df$MPG
z=scale(mpg)
class(z)
z_{i}=(x_{i}-/bar{x})/s_{x}
apply(z,2,mean)
apply(z,2,sd)
mpg[abs(z)>=2 & abs(z)<=3]
mpg[abs(z)>3]
apply(z,2,mean)
apply(z,2,sd)
library(lattice)
dotplot(mgp,col=mycol)
library(lattice)
dotplot(z,col=mycol)
library(lattice)
dotplot(I,col=mycol)
mycol = ifelse(abs(z)>3, "Red",
ifelse(abs(z)>=2 &abs(z)<=3,"Blue", "Black"))
library(lattice)
dotplot(mpg,col=mycol)
boxplot(mpg, data=ToothGrowth, notch=TRUE,
col=(c("green3")),
main="MPG")
boxplot(mpg, data=mpg, notch=TRUE,
col=(c("green3")),
main="MPG")
boxplot(mpg, data=mpg, notch=TRUE, col=(c("green3")), main="Miles Per Gallon", horizontal = TRUE)
length(I[abs(z)<3])/length(I)
length(mpg[abs(z)<3])/length(mpg)
length(mpg[abs(z)<2])/length(mpg)
length(I[mean(I)-2*sd(I) < I & I < mean(I)+ 2*sd(I) ])/length(I)
length(mpg[mean(mpg)-2*sd(mpg) < mpg & mpg < mean(mpg)+ 2*sd(mpg) ])/length(mpg)
sd(mpg)
sd(mpg)
mean(mpg)
sd(2,mpg)
mean(mpg)
2*sd(mpg)
mean(mpg)
uB <- mean(mpg) + 2*sd(mpg)
lB <- mean(mpg) - 2*sd(mpg)
show(uB)
show(lB)
uB <- mean(mpg) + 2*sd(mpg)
lB <- mean(mpg) - 2*sd(mpg)
length(mpg < uB & mpg > lB)/length(mpg)
uB <- mean(mpg) + 2*sd(mpg)
lB <- mean(mpg) - 2*sd(mpg)
length(mpg > uB & mpg < lB)/length(mpg)
for(c(mpg)){
for(mpg){
for(c(mpg)){
uB <- mean(mpg) + 2*sd(mpg)
lB <- mean(mpg) - 2*sd(mpg)
length(mpg[abs(z)<uB & mpg[abs(z)>lB]])/length(mpg)
uB <- mean(mpg) + 2*sd(mpg)
lB <- mean(mpg) - 2*sd(mpg)
length(mpg[uB > mpg & lB < mpg])/length(mpg)
1 - 1/2^2
length(mpg[abs(z)<2])/length(mpg)
#According to Chebyshev, 2SD should lie within
1 - 1/2^2
#According to Chebyshev, 2SD should lie within 75%
perc(1 - 1/2^2)
#According to Chebyshev, 2SD should lie within 75%
percent(1 - 1/2^2)
sprintf("%1.2f%%", 1 - 1/2^2)
length(mpg[abs(z)<2])/length(mpg)
sprintf("%1.3f%%", length(mpg[abs(z)<2])/length(mpg))
sprintf("%1.3f%%", length(mpg[abs(z)<2])/length(mpg) * 100)
sprintf("%f%%", length(mpg[abs(z)<2])/length(mpg) * 100)
sprintf("%f.0%%", length(mpg[abs(z)<2])/length(mpg) * 100)
sprintf("%.0f%%", length(mpg[abs(z)<2])/length(mpg) * 100)
sprintf("%.0f%%", (1 - 1/2^2)*100)
sprintf("%.0f%%", 95)
mpg[abs(z)>=2 & abs(z)<=3]
apply(z,2,mean)
mean(z)
apply(z,2,sd)
sd(z)*2
apply(z,2,mean)
apply(z,2,sd)
mpg.df=read.table("EPAGAS.csv",header=TRUE,sep=",")
head(mpg.df)
sprintf("%.0f%%", (1 - 1/2^2)*100)
