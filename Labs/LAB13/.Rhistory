var.test(y,x,alt="greater")#4
set.seed(50); x=rnorm(30,mean=50, sd=10)
set.seed(40); y=rnorm(40,mean=55, sd=20)
var.test(x,y) #1
var.test(y,x) #2
var.test(x,y,alt="less")#3
var.test(y,x,alt="greater")#4
rbern(10,4)
?rbinom
?bern
?bernoulli
rbinom(10,4)
rbinom(10,4,0.5)
rbinom(10,1,0.5)
set.sead(19)rbinom(10,1,0.5)
set.seed(19); rbinom(10,1,0.5)
x = set.seed(19); rbinom(10,1,0.5)
1+sum(x)
a = qbeta(0.95/2,9)
?qbeta()
set.seed(19); x = rbinom(10,1,0.5)
a = qbeta(x,shape1=1,shape2=1)
set.seed(19); x = rbinom(10,1,0.5)
a = qbeta(.95/2,shape1=1,shape2=1)
set.seed(19); x = rbinom(10,1,0.5)
a = qbeta(1-.95/2,shape1=1,shape2=1)
b = qbeta(.95/2,shape1=1,shape2=1)
set.seed(19); x = rbinom(10,1,0.5)
a = qbeta(1-.95/2,shape1=1,shape2=1)
b = qbeta(.95/2,shape1=1,shape2=1)
ci=c()
ci[1]= 1-a*sqrt((.5*.5)/10)
ci[2]= 1+a*sqrt((.5*.5)/10)
ci
knitr::opts_chunk$set(echo = TRUE)
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-n)^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-n)^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (1);
}
}
veg = recursive.vegas(1);
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-n)^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-n)^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (1);
}
}
veg = recursive.vegas(1);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-n)^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-n)^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (1);
}
}
veg = recursive.vegas(2);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-n)^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-n)^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (1);
}
}
veg = recursive.vegas(50);
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-n)^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-n)^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (1);
}
}
veg = recursive.vegas(10);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-n)^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((n-1)^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (1);
}
}
veg = recursive.vegas(10);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-n)^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((n-1)^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (2);
}
}
veg = recursive.vegas(10);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((n-1)^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((n-1)^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (2);
}
}
veg = recursive.vegas(10);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (2);
}
}
veg = recursive.vegas(10);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (2);
}
}
veg = recursive.vegas(20);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (2);
}
}
veg = recursive.vegas(50);
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (2);
}
}
veg = recursive.vegas(20);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
return (2);
}
}
veg = recursive.vegas(25);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
}
}
veg = recursive.vegas(25);
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
return(total);
}
}
veg = recursive.vegas(15);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
return(total);
}
}
veg = recursive.vegas(16);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
return(total);
}
}
veg = recursive.vegas(20);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
return(total);
}
}
veg = recursive.vegas(25);
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
return(total);
}
}
veg = c();
for(i in 2:20){
veg = c(veg, recursive.vegas(i));
}
veg
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
return(total);
}
}
veg = c();
for(i in 2:21){
veg = c(veg, recursive.vegas(i));
}
veg
plot(x=c(2:20), y=veg, main="Ways of parenthesizing an Equation of N e",
xlab="Elements", ylab="Ways to Parenthesize", pch=19);
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
return(total);
}
}
veg = c();
for(i in 2:20){
veg = c(veg, recursive.vegas(i));
}
veg
plot(x=c(2:20), y=veg, main="Ways of parenthesizing an Equation of N e",
xlab="Elements", ylab="Ways to Parenthesize", pch=19);
lines(x=c(2:20), y=veg, type = "l")
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
return(total);
}
}
veg = c();
for(i in 3:20){
veg = c(veg, recursive.vegas(i));
}
veg
plot(x=c(3:20), y=veg, main="Ways of parenthesizing an Equation of N e",
xlab="Elements", ylab="Ways to Parenthesize", pch=19);
lines(x=c(2:20), y=veg, type = "l")
plot(x=c(3:20), y=veg, main="Ways of parenthesizing an Equation of N e",
xlab="Elements", ylab="Ways to Parenthesize", pch=19);
lines(x=c(3:20), y=veg, type = "l")
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", pch=19);
lines(x=c(3:20), y=veg, type = "l")
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
return(total);
}
}
veg = c();
e = c();
for(i in 3:20){
veg = c(veg, recursive.vegas(i));
e = c(e, exp(i));
}
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", pch=19);
lines(x=c(3:20), y=veg, type = "l")
lines(x=c(3:20), y=e, type = "l")
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", pch=19);
lines(x=c(3:20), y=veg, type = "l")
lines(x=c(3:20), y=e-1, type = "l")
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", pch=19);
#lines(x=c(3:20), y=veg, type = "l")
lines(x=c(3:20), y=e, type = "l")
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", xlim=20, ylim=40, pch=19);
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", xlim=c(0,20), ylim=c(0,40), pch=19);
#lines(x=c(3:20), y=veg, type = "l")
lines(x=c(3:20), y=e, type = "l")
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", xlim=c(0,20), ylim=c(0,40), pch=19);
#lines(x=c(3:20), y=veg, type = "l")
lines(x=c(3:20), y=e, type = "l")
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + recursive.vegas(i)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
return(total);
}
}
veg = c();
e = c();
for(i in 3:20){
veg = c(veg, recursive.vegas(i));
e = c(e, exp(1));
}
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", xlim=c(0,20), ylim=c(0,40), pch=19);
lines(x=c(3:20), y=veg, type = "l")
lines(x=c(3:20), y=e, type = "l")
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", pch=19);
lines(x=c(3:20), y=veg, type = "l")
lines(x=c(3:20), y=e, type = "l")
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", ylim=c(0,2.8), pch=19);
lines(x=c(3:20), y=veg, type = "l")
lines(x=c(3:20), y=e, type = "l")
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", ylim=c(2.4,2.8), pch=19);
lines(x=c(3:20), y=veg, type = "l")
lines(x=c(3:20), y=e, type = "l")
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", ylim=c(2.3,2.8), pch=19);
lines(x=c(3:20), y=veg, type = "l")
lines(x=c(3:20), y=e, type = "l")
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + (recursive.vegas(i)+1)*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
return(total);
}
}
veg = c();
e = c();
for(i in 3:20){
veg = c(veg, recursive.vegas(i));
e = c(e, exp(1));
}
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", ylim=c(2.3,2.8), pch=19);
lines(x=c(3:20), y=veg, type = "l")
lines(x=c(3:20), y=e, type = "l")
recursive.vegas<-function(n=1){
sum = 0;
if(n > 2){
for(i in 2:(n-1)){
sum = sum + (recursive.vegas(i))*(choose(n,i)*((1/n)^i)*((1-(1/n))^(n-i)));
}
total = ((1+sum)/(1-(choose(n,0)*((1-(1/n))^(n)))-(choose(n,n)*((1/n)^n))));
return(total);
} else {
sum = (choose(2,2)*((1/2)^2));
total = ((1+sum)/(1-(choose(2,0)*((1-(1/2))^(2)))-(choose(2,2)*((1/2)^2))));
return(total);
}
}
veg = c();
e = c();
for(i in 3:20){
veg = c(veg, recursive.vegas(i));
e = c(e, exp(1));
}
plot(x=c(3:20), y=veg, main="Average Rounds needed to Find a Leader",
xlab="Number of Nominees", ylab="Average rounds", ylim=c(2.3,2.8), pch=19);
lines(x=c(3:20), y=veg, type = "l")
lines(x=c(3:20), y=e, type = "l")
